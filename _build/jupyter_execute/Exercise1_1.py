### Μέρος 1:  Εξάσκηση στην Python
---

from scipy import signal
# Ανατρέξτε στην τεκμηρίωση της βιβλιοθήκης scipy.signal
# https://docs.scipy.org/doc/scipy/reference/signal.html
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from numpy import random
# Δείτε την έκδοση της αριθμητικής βιβλιοθήκης numpy
np.__version__

import warnings
warnings.filterwarnings('ignore')

Μην ξεχνάτε ότι η IPython μας δίνει τη δυνατότητα να 'εξερευνήσουμε' το περιεχόμενο ενός package, χρησιμοποιώντας τη δυνατότητα του tab-completion, ή τη χρήση του ? για help/documentation: 
Π.χ., για να δούμε όλα τα περιεχόμενα του signal namespace δίνουμε:

In [3]: signal?
    
και για να καλέσουμε την ενσωμετωμένη τεκμηρίωση της numpy, δίνουμε:

In [4]: np?

Περισσότερες πληροφορίες μπορείτε να πάρετε από το http://www.numpy.org.

# Δημιουργήστε ένα βαθμωτό (μονοδιάστατο) μέγεθος

s=2
print('s =',s)

# Δημιουργείστε ένα διάνυσμα πραγματικών τιμών:
# Στο MATLAB: v = [1,5,9] ή v = [1 5 9]

v=np.array([1,5,9])
print('v =',v)

# Πρόσβαση στα στοιχεία ενός numpy array
# το πρώτο στοιχείο ξεκινάει στο 0

print(v[0], end=" ")
print(v[1])

# υπάρχει και η δυνατότητα πρόσβασης στοιχείων από το τέλος με αρνητικούς δείκτες
# το τελευταίο στοιχείο έχει δείκτη -1 το προτελευταλιο -2 κ.ο.κ.

print(v[-1], end=" ")
print(v[-2])

# Τα numpy arrays προσφέρουν και δυνατότητες τεμαχισμού (slicing)
# το απλό slicing u[start:end] ξεκινάει από το στοιχείο
# στη θέση start και φτάνει στη θέση end (χωρίς να την περιέχει)
# αν η αρχή ή το τέλος παραληφθεί, αυτά λαμβάνονται η αρχή ή το τέλος του πίνακα
# επίσης μπορεί να χρησιμοποιηθεί και βήμα με την μορφή u[start:end:step]

u=np.array([1,5,9,7,3,2])
print(u[:3])
print(u[2:])
print(u[1:5])

print(u[::2])


# Προσσοχή, όταν θέλουμε να εξάγουμε από έναν πίνακα ένα συγκερκιμένο τεμάχιο
# όπως παρακάτω, τα δύο numpy arrays είναι σενδεδεμένα, δηλ. ο,τι αλλάζει στο ένα
# αλλάζει και στο άλλο
u_slice1 = u[2:5]
print("τεμάχιο:                       ", u_slice1)
print("αρχικός πίνακας:               ", u)
u_slice1[0] = 8
print("τεμάχιο μετά από αλλαγή:       ", u_slice1)
print("αρχικός πίνακα μετά από αλλαγή:", u)

# Όποτε θέλουμε να το αποφύγουμε αυτό χρησιμοποιούμε το .copy()
u_slice2 = u[2:5].copy()
u_slice2[0] = 9
print("\nτεμάχιο με .copy() μετά από αλλαγή:       ", u_slice2)
print("αρχικός πίνακα μετά από αλλαγή με .copy():", u)

# Δημιουργείστε έναν πίνακα πραγματικών τιμών:
# Στο MATLAB: a = a=[[1,2,3];[4,5,6];[7,8,9]] ή a=[1,2,3;4,5,6;7,8,9]
a=np.array([[1,2,3],[4,5,6],[7,8,9]])
print('a =',a)

# Αθροίστε

a+5

#Πολλαπλασιάστε

b=s*v*2
print('b =',b)

# Πολλαπλασιάστε στοιχείο-προς-στοιχείο (elementwise)
# MATLAB: v.*b

np.multiply(v,b)

#Ελέγξτε το μήκος ενός διανύσματος
# MATLAB: length(v)

len(v)

# Ελέγξτε το μέγεθος ενός πίνακα
# MATLAB: size(a)

a.shape   # για array: np.array(a.shape)

# Προσπελάστε συγκεκριμένα στοιχεία ενός πίνακα
# Η δεικτοδότηση αρχίζει από το 0. 
# MATLAB: a(1,2)  
# --- ΠΡΟΣΟΧΗ, στο MATLAB η δεικτοδ΄ότηση αρχ΄ίζει από το 1!

a[0,1]

# Προσπελάστε συγκεκριμένα στοιχεία ενός πίνακα (συνέχεια)
# Αρνητικές τιμές μετρούν από το τέλος, π.χ. το -1 
# αναφέρεται στο τελευταίο στοιχείο)

a[1,-1]

# Προσπελάστε συγκεκριμένο τμήμα ενός διανύσματος
# MATLAB: v(1:9)

v[1:3]

# ΠΡΟΣΟΧΗ: τα στοιχεία [2ο,3ο] δίνονται ως 1:3 και όχι ως 1:2
# Δοκιμάστε το v[1:2]...

# Προσπελάστε συγκεκριμένα τμήματα ενός πίνακα

a[0:2,:]

# Ομοίως: οι γραμμές 1 & 2 δίνονται ως 0:2 και όχι ως 0:1

# Δημιουργήστε ένα διάνυσμα με στοιχεία από το 0 έως το 0.5 και βήμα 0.1
# MATLAB: t=(0:0.1:0.4)

t=np.arange(0,0.5,0.1)
print('t=',t)